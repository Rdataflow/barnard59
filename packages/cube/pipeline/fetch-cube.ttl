@prefix code: <https://code.described.at/> .
@prefix p: <https://pipeline.described.at/> .
@prefix sparql: <https://barnard59.zazuko.com/operations/sparql/> .
@prefix ntriples: <https://barnard59.zazuko.com/operations/formats/ntriples/> .
@prefix base: <https://barnard59.zazuko.com/operations/base/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

@base <http://barnard59.zazuko.com/pipeline/cube-validation/> .

_:endpoint a p:Variable ;
  p:name "endpoint" ;
  rdfs:label "SPARQL endpoint" ;
.

_:cube a p:Variable ;
  p:name "cube" ;
  rdfs:label "cube URI" ;
.

<fetch-cube> a p:Pipeline , p:Readable ;
  p:variables [ p:variable _:endpoint, _:cube ] ;
  p:steps
    [
      p:stepList
        (
          [ base:concat\/object (
            _:queryCube 
            _:queryObservationSet
            _:queryObservations
            ) ]
          [ ntriples:serialize () ]
        )
    ]
.


_:queryCube a p:Pipeline , p:ReadableObjectMode ;
  p:steps
    [
      p:stepList
        (
          [ # same query as in fetch-observations (TODO: load both from file once https://github.com/zazuko/barnard59/issues/257 is available)
            sparql:construct
              [ code:name "endpoint"; code:value "endpoint"^^p:VariableName ] ,
              [
                code:name "query";
                code:value """
                #pragma describe.strategy cbd

                DESCRIBE <${cube}>
                """^^code:EcmaScriptTemplateLiteral
              ]
          ]
        )
    ]
  .

_:queryObservationSet a p:Pipeline, p:ReadableObjectMode ;
  p:steps
    [
      p:stepList
        (
          [
            sparql:construct
              [ code:name "endpoint"; code:value "endpoint"^^p:VariableName ] ,
              [
                code:name "query";
                code:value """
                PREFIX cube: <https://cube.link/>
                
                CONSTRUCT { ?s cube:observation ?o } 
                WHERE {
                  <${cube}> cube:observationSet ?s .
                  ?s cube:observation ?o .
                }
                """^^code:EcmaScriptTemplateLiteral
              ]
          ]
        )
    ]
  .
  
  _:queryObservations a p:Pipeline, p:ReadableObjectMode ;
  p:steps
    [
      p:stepList
        (
          [ # same query as in fetch-observations (TODO: load both from file once https://github.com/zazuko/barnard59/issues/257 is available)
            sparql:construct
              [ code:name "endpoint"; code:value "endpoint"^^p:VariableName ] ,
              [
                code:name "query";
                code:value """
                PREFIX cube: <https://cube.link/>

                CONSTRUCT { ?s ?p ?o }
                WHERE {
                  <${cube}> cube:observationSet/cube:observation ?s .
                  ?s ?p ?o
                }
                """^^code:EcmaScriptTemplateLiteral
              ]
          ]
        )
    ]
  .
  
